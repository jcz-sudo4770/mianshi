性能分析：
1.构建性能：构建速度
2.构建体积：构建体积影响页面访问速度


webpack中loader和plugin区别：
webpack中loader和plugin都扮演着重要角色，只不过他们使用的方式和应用场景有所不同
loader：主要是拥吻不同类型文件的处理，webpack本身只具备处理js文件的能力，对于css文件，图片资源文件，vue文件等，需要借助loader来进行处理，
比如css文件，需要交给css-loader,style-loader处理，vue文件需要借助vue-loader处理，vue文件需要借助vue
plugin：侧重在webpack打包的整个生命周期中执行特定的任务，功能更为广泛，有很多plugin，比如打包优化webpack.DllPlugin,webpack.DllReferencePlugin,
本质不同：loader本质就是一个函数，接收源文件内容作为输入，经过函数的处理后将内容输出
plugin是一个具有apply方法的类，在webpack启动的时候辉调用插件的apply方法，并传入compiler对象，
插件通过监听compiler和compilation上的各种钩子事件，在打包流程的不同阶段执行自定义逻辑
使用方式不同：一个配置在module.rules上，一个是配置在plugins上

前端缓存方案：
浏览器缓存：
    1.强缓存:浏览器请求资源检查本地资源是否有效，如果有效直接使用本地资源，无需向服务器发起请求 Cache-Control字段设置缓存时间
    2.协商缓存：浏览器会发送请求到服务器，由服务器判断资源是否有更新，若未更新则返回 304 状态码，浏览器使用本地缓存。
浏览器缓存：
    3.localStorage
    4.sessionStorage
    5.idnexDB
服务器缓存：
    6.cnd缓存
    7.服务器内存缓存，使用redis存储一些经常访问的数据，减少数据库操作次数
应用层缓存：使用keep-alive缓存组件

不同标签页之间的通信：
1.localStorage